import os
import hashlib
import ssdeep
import tkinter as tk
from tkinter import *  
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog
import datetime as dt
import time as tm
from time import strftime
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.pyplot import figure




  

root=Tk() 
root.title("Malware Analysis Using SSDEEP")
root.geometry("950x550+250+100")
## root.configure(background = "ORANGE")
root.resizable(height=False ,width=False)


##### FRAME 1 #####
frame1=ttk.Frame(root,width=250,height=80, relief=GROOVE)
frame1.grid(row = 0, column = 0, padx=0 , pady=0)
frame1.propagate(0)
date = dt.datetime.now()
format_date = f"{date:%a, %b %d %Y}"
Label(frame1, text=format_date, fg="black", font = ('calibri', 19, 'bold')).pack()
def time():
    string = strftime('%H:%M:%S %p')
    lbl.config(text = string)
    lbl.after(1000, time)
lbl = Label(frame1, fg="black" , font = ('calibri', 19, 'bold'))
lbl.pack(anchor = 'center')
time()





##### FRAME 2 #####
frame2=ttk.Frame(root,width=700,height=80, relief=GROOVE)
frame2.grid(row = 0, column = 1, padx=0 , pady=0)
frame2.propagate(0)
Label(frame2, text="Malware Analysis Using SSDEEP",  font = ('calibri', 29, 'bold')).pack()





##### FRAME 4 #####
global frame4
frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
frame4.grid(row = 1, column = 1, padx=0 , pady=0)
frame4.propagate(0)
label1 = Label(frame4, text="Your Device is Safe",  font = ('calibri', 40, 'bold')).pack(pady=(100,0))
label1 = Label(frame4, text="With US",  font = ('calibri', 40, 'bold')).pack()



def addHash():
    global frame4
    frame4.destroy()
    frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
    frame4.grid(row = 1, column = 1, padx=0 , pady=0)
    frame4.propagate(0)
    

    def add():
        directory = filedialog.askdirectory()
        test="mainGUI.py"
        md="hash_data.txt"
        
        for files in os.listdir(directory):
            filename = files
            if(filename != test and filename != md ):
                with open(directory+"\\"+filename, 'rb') as open_file:
                    content = open_file.read()
                    hasher = ssdeep.hash(content)

                with open("hash_data.txt" , "r+") as f:
                    if hasher not in f.read().split("\n"):
                        f.write('\n'+hasher)
                        print(filename)
    
        label3.config(text="Hash Values Added in Database")

    label=Label(frame4, text="Malware Analysis Using SSDEEP Hashing", font=("Verdana",20))
    label.pack(pady=(80,10))
    selectFileButton = Button(frame4, text="Select folder",font=("Verdana",20), command=add)
    selectFileButton.pack(pady=20)
    label3 = Label(frame4,text="",font=("Verdana",20))
    label3.pack(pady=20)





def compareFile():
    global frame4
    frame4.destroy()
    frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
    frame4.grid(row = 1, column = 1, padx=0 , pady=0)
    frame4.propagate(0)

    def firstFile():
        global hasher1
        filepath = filedialog.askopenfilename(initialdir="C:/Users/Admin/Desktop/Malware Analysis/", title="Select A File", filetype = [("All Files", "*.*"),("pdf file","*.pdf"),("docx file","*.docx"),("python Files","*.py"),("Text Files","*.txt")])
        filename = os.path.basename(filepath)
        with open(filepath, 'rb' ) as open_file:
            content = open_file.read()
            hasher1 = ssdeep.hash(content)
        label3.config(text="%s uploaded" % filename) 

    def secondFile():
        global hasher2
        filepath = filedialog.askopenfilename(initialdir="C:/Users/Admin/Desktop/Malware Analysis/", title="Select A File", filetype = [("All Files", "*.*"),("pdf file","*.pdf"),("docx file","*.docx"),("python Files","*.py"),("Text Files","*.txt")])
        filename = os.path.basename(filepath)
        with open(filepath, 'rb' ) as open_file:
            content = open_file.read()
            hasher2 = ssdeep.hash(content)
        label3.config(text="%s uploaded" % filename) 

    def compare():
        global hasher1,hasher2
        result = ssdeep.compare(hasher1,hasher2)
        label3.config(text="Matching Percentage %s" % result) 



    label1=Label(frame4, text="Compare Files Using SSDEEP Hashing", font=("Verdana",20))
    label1.pack(pady =(30,10))
    selectFileButton = Button(frame4, text="Select 1st file",font=("Verdana",15), command=firstFile)
    selectFileButton.pack(pady=10)
    selectFileButton = Button(frame4, text="Select 2nd file",font=("Verdana",15), command=secondFile)
    selectFileButton.pack(pady=5)
    selectFileButton = Button(frame4, text="Compare",font=("Verdana",20), command=compare)
    selectFileButton.pack(pady=20)
    label3 = Label(frame4,text="",font=("Verdana",20))
    label3.pack(pady=10)




def scanFile():
    global frame4
    frame4.destroy()
    frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
    frame4.grid(row = 1, column = 1, padx=0 , pady=0)
    frame4.grid(row = 1, column = 1, padx=0 , pady=0)
    frame4.propagate(0)

    def selectFile():
        filepath = filedialog.askopenfilename(initialdir="C:/Users/Admin/Desktop/Malware Analysis/", title="Select A File", filetype = [("All Files", "*.*"),("pdf file","*.pdf"),("docx file","*.docx"),("python Files","*.py"),("Text Files","*.txt")])
        filename = os.path.basename(filepath)
        flag = 0
        s=0
        m=0
        t=0
        with open(filepath, 'rb' ) as open_file:
            t+=1
            content = open_file.read()
            hasher = ssdeep.hash(content)

        with open("hash_data.txt" , "r+") as f:
            for lines in f.read().split("\n"):
##                print(ssdeep.compare(hasher,lines))
                if (ssdeep.compare(hasher,lines) > 75 ):
                    flag += 1
                else:
                    flag += 0
            if (flag >= 1 ):
                m+=1
                a= "The selected File is a malware"
                label3.config(text=a)
            else:
                s+=1
                a="The selected File is not a Malware"
                label3.config(text=a) 

        with open("history.txt", "r") as h:
            lines = []
            for line in h:
                lines.append(line)
        with open("history.txt", "w") as h:
            h.write(str(int(lines[0])+int(t))+"\n"+str((int(lines[1])+int(s)))+"\n"+str((int(lines[2])+int(m))))



    label1=Label(frame4, text="Malware Analysis Using SSDEEP Hashing", font=("Verdana",20))
    label1.pack(pady =(80,10))
    selectFileButton = Button(frame4, text="Select file",font=("Verdana",20), command=selectFile)
    selectFileButton.pack(pady=20)
    label3 = Label(frame4,text="",font=("Verdana",20))
    label3.pack(pady=30)



def folder_scan():
    global frame4
    frame4.destroy()
    frame4=ttk.Frame(root,width=700, height=470, relief=GROOVE)
    frame4.grid(row = 1, column = 1, padx=0 , pady=0)
    frame4.propagate(0)

    hasher = hashlib.md5()
    test="mainGUI.py"
    md="hash_data.txt"
    

    def selectFolder():
        global frame4
        frame4.destroy()
        frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
        frame4.grid(row = 1, column = 1, padx=0 , pady=0)
        frame4.propagate(0)



        treev = ttk.Treeview(frame4, selectmode ='browse',height =20)
        treev.pack(side ='top')
        verscrlbar = ttk.Scrollbar(frame4, orient ="vertical", command = treev.yview)
##        verscrlbar.pack(side ='right', fill ='x')
        treev.configure(xscrollcommand = verscrlbar.set)
        treev["columns"] = ("1", "2", "3")
        treev['show'] = 'headings'
        treev.column("1", width = 60, anchor ='c')
        treev.column("2", width = 540, anchor ='w')
        treev.column("3", width = 70, anchor ='w')
        treev.heading("1", text ="Sr. No")
        treev.heading("2", text ="File Name")
        treev.heading("3", text ="Status")


        directory = filedialog.askdirectory()
        file_count = 1
        s=0
        m=0
        t=0
        for files in os.listdir(directory):
            t+=1
            flag = 0
            filename = files
            if(filename != test and filename != md ):
##                print(filename)
                with open(directory+"\\"+filename, 'rb') as open_file:
                    content = open_file.read()
                    hasher = ssdeep.hash(content)

                with open("hash_data.txt" , "r+") as f:
                    for lines in f.read().split("\n"):
                        
                        if (ssdeep.compare(hasher,lines) > 75 ):
                            flag += 1
                        else:
                            flag += 0
                    if (flag >= 1 ):
                        m+=1
                        a= "The selected File is a malware"
                        z = "Malware"
                        treev.insert("", 'end', text ="L"+str(file_count), values =(file_count, filename, z))
                        file_count += 1
                    else:
                        s+=1
                        z= "Safe"
                        a="The selected File is not a Malware"
                        treev.insert("", 'end', text ="L"+str(file_count), values =(file_count, filename, z))
                        file_count += 1
        with open("history.txt", "r") as h:
            lines = []
            for line in h:
                lines.append(line)
        with open("history.txt", "w") as h:
            h.write(str(int(lines[0])+int(t))+"\n"+str((int(lines[1])+int(s)))+"\n"+str((int(lines[2])+int(m))))

    label=Label(frame4, text="Malware Analysis Using SSDEEP Hashing", font=("Verdana",20))
    label.pack(pady=(80,10))
    selectFileButton = Button(frame4, text="Select folder",font=("Verdana",20), command=selectFolder)
    selectFileButton.pack(pady=20)







def viewHash():
    global frame4
    frame4.destroy()
    frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
    frame4.grid(row = 1, column = 1, padx=0 , pady=0)
    frame4.propagate(0)
    BUF_SIZE = 65536 


    def calHash(content, sha224, sha256, sha512):
        global frame4
        frame4.destroy()
        frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
        frame4.grid(row = 1, column = 1, padx=0 , pady=0)
        frame4.propagate(0)

        
        md5 = hashlib.md5(content).hexdigest()
        ssdeep1 = ssdeep.hash(content)
        
        label=Label(frame4, text="Hash Name",width =8, font=("Verdana",15))
        label.grid(row = 0, column = 0, ipadx =2 , ipady = 5 )    
        label=Label(frame4, text="Hash Value", width =33,font=("Verdana",15))
        label.grid(row = 0, column = 1, ipadx =2 , ipady = 5 )  

        Label(frame4, text="MD5", width =12,font=("Verdana",12)).grid(row=1, column=0, ipadx=2,ipady=2 ) 
        b = Text(frame4, height=1, width =40,font=("Verdana",10))
        b.grid(row=1, column=1,ipadx=2,ipady=3,pady=12)
        b.insert(END, md5)

        Label(frame4, text="SHA224", width =12,font=("Verdana",12)).grid(row=2, column=0, ipadx=2,ipady=2 )
        b = Text(frame4, height=2, width =40,font=("Verdana",10))
        b.grid(row=2, column=1,ipadx=2,ipady=3,pady=12)
        b.insert(END, sha224)

        Label(frame4, text="SHA256", width =12,font=("Verdana",12)).grid(row=3, column=0, ipadx=2,ipady=2 )
        b = Text(frame4, height=2, width =40,font=("Verdana",10))
        b.grid(row=3, column=1,ipadx=2,ipady=3,pady=12)
        b.insert(END, sha256)
        
        Label(frame4, text="SHA512", width =12,font=("Verdana",12)).grid(row=4, column=0, ipadx=2,ipady=2 )
        b = Text(frame4, height=3, width =40,font=("Verdana",10))
        b.grid(row=4, column=1,ipadx=2,ipady=3,pady=12)
        b.insert(END, sha512)
        
        Label(frame4, text="SSDEEP", width =12,font=("Verdana",12)).grid(row=5, column=0, ipadx=2,ipady=2 )
        b = Text(frame4, height=2, width =40,font=("Verdana",10))
        b.grid(row=5, column=1,ipadx=2,ipady=3,pady=12)
        b.insert(END, ssdeep1)


                   

    def selectFile():
        filepath = filedialog.askopenfilename(initialdir="C:/Users/Admin/Desktop/Malware Analysis/", title="Select A File", filetype = [("All Files", "*.*"),("pdf file","*.pdf"),("docx file","*.docx"),("python Files","*.py"),("Text Files","*.txt")])
        filename = os.path.basename(filepath)

        sha224 = hashlib.sha224()
        sha256 = hashlib.sha256()
        sha512 = hashlib.sha512()

        with open(filename, 'rb') as f:
            while True:
                data = f.read(BUF_SIZE)
                if not data:
                    break
                sha224.update(data)
                sha256.update(data)
                sha512.update(data)
        
        sha224 = sha224.hexdigest()
        sha256 = sha256.hexdigest()
        sha512= sha512.hexdigest()
                
        with open(filename, 'rb' ) as open_file:
            content = open_file.read()
        
        calHash(content,sha224, sha256, sha512)


    label=Label(frame4, text="View Hash Values of a File", font=("Verdana",20))
    label.pack(pady=(80,10))
    selectFileButton = Button(frame4, text="Select file",font=("Verdana",20), command=selectFile)
    selectFileButton.pack(pady=20)
   





def history_files():
    global frame4
    frame4.destroy()
    frame4=ttk.Frame(root,width=700,height=470, relief=GROOVE)
    frame4.grid(row = 1, column = 1, padx=0 , pady=0 )
    frame4.propagate(0)
    
    with open("history.txt", "r") as h:
        lines = []
        for line in h:
            lines.append(line)
    

    fig = plt.figure()
    ax = fig.add_axes([0,0,1,1])
    ax.axis('equal')
####    figure(figsize=(6, 6), dpi=80)
    fig.set_size_inches(18.5, 8.5, forward=True)
    langs = ['Malware Files','Secured Files']
    files = [ lines[2],lines[1]]
    ax.pie(files, labels = langs,autopct='%1.2f%%')
    pie1=FigureCanvasTkAgg(fig, frame4)
    pie1.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH)
    ax.set_title('Secured Vs. Malware Files')


   




def exit():
    root.destroy()






##### FRAME 3 #####
frame3=ttk.Frame(root,width=250,height=470, relief=GROOVE)
frame3.grid(row = 1, column = 0, padx=0 , pady=0)
frame3.propagate(0)
btncheck = Button(frame3, text = "Add Hash", font = ("Comic sans ms", 16),width=14,  relief = GROOVE, command = addHash,)
btncheck.pack(pady=(5,0))
btncheck = Button(frame3, text = "Compare Files", font = ("Comic sans ms", 16),width=14,  relief = GROOVE, command = compareFile,)
btncheck.pack()
btncheck = Button(frame3, text = "File Scan", font = ("Comic sans ms", 16),width=14,  relief = GROOVE, command = scanFile,)
btncheck.pack()
btncheck = Button(frame3, text = "Folder Scan", font = ("Comic sans ms", 16),width=14, relief = GROOVE, command = folder_scan,)
btncheck.pack()
btncheck = Button(frame3, text = "View Hash Value", font = ("Comic sans ms", 16),width=14,  relief = GROOVE, command = viewHash,)
btncheck.pack()
btncheck = Button(frame3, text = "History", font = ("Comic sans ms", 16),width=14, relief = GROOVE, command = history_files,)
btncheck.pack()
btncheck = Button(frame3, text = "Exit", font = ("Comic sans ms", 16),width=14, relief = GROOVE, command = exit,)
btncheck.pack()


root.mainloop()






    # path = "C:/Users/Admin/Desktop/Malware Analysis/zsample"
    # obj = os.scandir()
    # print("Files and Directories in '% s':" % path)
    # for entry in obj :
    #     if entry.is_file():
    #         print(entry.name)
    # obj.close()


            # b = Entry(frame4, text="", width =10,font=("Verdana",15))
        # b.grid(row=0, column=0)
        # b.insert(END, 'Hash Name')
        # b = Entry(frame4, text="", width =30,font=("Verdana",15))
        # b.grid(row=0, column=1)
        # b.insert(END, "Hash Value")
        # b = Entry(frame4, text="", width =10,font=("Verdana",15))
        # b.grid(row=1, column=0)
        # b.insert(END, 'MD5')
        # b = Entry(frame4, text="", width =10,font=("Verdana",15))
        # b.grid(row=2, column=0)
        # b.insert(END, 'SHA224')
        # b = Entry(frame4, text="", width =10,font=("Verdana",15))
        # b.grid(row=3, column=0)
        # b.insert(END, 'SHA256')
        # b = Entry(frame4, text="", width =10,font=("Verdana",15))
        # b.grid(row=4, column=0)
        # b.insert(END, 'SHA512')
        # b = Entry(frame4, text="", width =10,font=("Verdana",15))
        # b.grid(row=5, column=0)
        # b.insert(END, 'SSDEEP')
